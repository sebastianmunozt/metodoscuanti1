---
title: "Clase 11"
subtitle: "Data Wrangling y ggplot2"  
author: 
  - "Sebastián Muñoz"
date: '`r Sys.Date()`'
output:
  xaringan::moon_reader:
    css: xaringan-themer.css
    nature:
      slideNumberFormat: "%current%"
      highlightStyle: github
      highlightLines: true
      ratio: 16:9
      countIncrementalSlides: true
      figure_width: 8
      figure_height: 4
---

```{r setup, include=FALSE}
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(
  fig.width=9, fig.height=3.5, fig.retina=3,
  out.width = "100%",
  cache = FALSE,
  echo = TRUE,
  message = FALSE, 
  warning = FALSE,
  hiline = TRUE
)
```

```{r xaringan-themer, include=FALSE, warning=FALSE}
library(xaringanthemer)
style_duo_accent(
  primary_color = "#1381B0",
  secondary_color = "#FF961C",
  inverse_header_color = "#FFFFFF"
)

pacman::p_load(tidyverse, gt,kableExtra, xaringan)

```




```{r xaringan-animate-css, echo=FALSE}
xaringanExtra::use_animate_css()
xaringanExtra::use_tachyons()
xaringanExtra::use_share_again()

```



## En esta clase


### 1. Repaso

### 2. Data Wrangling

#### 2.1 Limpieza de datos

#### 2.2 Transformación de variables

#### 2.3 Exportar

### 3. Gráficos con ggplot


---
class: inverse, center, middle

# 1. Repaso

---
# De persona novata a experta

![novato](img/novato.png)

---
# De persona novata a experta

![experto](img/experto.png)
---

background-size: contain
background-repeat: no-repeat
background-position: center center
background-image: url("img/quipu0.png")





---

### Flujo de trabajo

![flujo](img/flujo.png)

---
### Orden de script

![datos](img/orden script.png)



---

## Tipos de datos

![datos](img/Rvariablesdata.jpg)

---
## Listas

![datos](img/list.jpg)


---

#Importación de bases de datos
A la hora de importar una base de datos nos podemos llegar a enfrentar a distintos tipos de archivos. En R contamos con **distintos paquetes y funciones** según el **tipo de extensión** del archivo:    

```{r echo=FALSE}

importacion <- tibble(
  "Tipo de archivo" = c("Texto Plano",
                        "Texto Plano",
                        "Texto Plano",
                        "Extension de R",
                        "Extension de R",
                         "Otros Softwares",
                         "Otros Softwares",
                         "Excel",
                         "Excel"),
           "Paquete" =c("readr",
                        "readr",
                        "readr",
                        "RBase",
                        "RBase",
                        "haven",
                        "haven",
                        "openxlsx",
                        "readxl"),
             "Extension" =c(".csv",
                          ".txt",
                          ".tsv",
                          ".RDS",
                          ".RDATA",
                          ".dta",
                          ".sav",
                          ".xlsx",
                          ".xls"),
         "Funciones" = c("read_csv()",
                           "read_txt()","read_tsv()",
                           "readRDS()", "open()",
                           "read_dta()","read_spss()",
                           "read.xlsx()","read_excel()")    
)  

kable(importacion, format = 'html') %>%
  kable_styling(bootstrap_options = c("striped", "hover")) %>% 
  collapse_rows(columns = 2)
```

---
#Importación de bases de datos

El primer y más importante parámetro de las funciones para importar datos suele llamarse  **`file`**. Allí debemos especificar la ruta hasta el archivo, incluyendo la extensión del mismo. 

Si tenemos abierto un proyecto, el punto de partida para la ruta a especificar será la carpeta del proyecto. Si queremos ir hacia atrás en las carpetas agregamos  **`../`**
```{r eval=FALSE, include=T}
base.vacunas<- read_csv(
  file = "../Fuentes/Covid19VacunasAgrupadas.csv")    

base.covid <- readRDS(file = "../Fuentes/base_covid_sample.RDS")
```
**IMPORTANTE**: Siempre que lean bases de datos asignarlas a un nuevo objeto. De lo contrario, las va a mostrar completas en consola y no va a guardarlas en el ambiente de trabajo (enviroment)
---
#Exportación de resultados
Por lo general, cada paquete que presenta funciones para importar bases de dato, tiene como complemento una función para exportar (guardar en el disco de nuestra PC) un objeto con la misma extensión. Ejemplos: 


 - el paquete **openxlsx** tiene una función denominada **`write.xlsx()`** que nos permite exportar un dataframe creando un archivo **.xslx**
 - En RBase la función **`saveRDS()`** nos permite exportar archivos de extensión **.RDS** (son menos pesados para trabajarlos luego desde R)

En general estas funciones tienen un primer parametro para especificar el objeto a exportar, y un segundo para especificar la ruta y el nombre de archivo a crear ()

```{r eval=FALSE, include=T}
write.xlsx(x = objeto_resultados,file = "Resultados/cuadro1.xlsx")

saveRDS(object = objeto_resultados,file = "Resultados/base_nueva.RDS")
```




---

background-size: contain
background-repeat: no-repeat
background-position: center center
background-image: url("img/quipu.png")

---

## Definición de Términos

### Quipú
- Artefacto inca de cuerdas y nudos
- Función: registro de información económica, demográfica, histórica
- Operadores: quipucamayocs

### Base de Datos
- Sistema digital para almacenar y manipular información
- Estructura: tablas con filas y columnas
- Acceso mediante lenguajes de programación

---

## Analogías Funcionales

### Almacenamiento de Información
- **Quipú:** Posición y color de hilos, tipos de nudos
- **Base de Datos:** Registros digitales en estructuras predefinidas

### Sistematización y Orden
- **Quipú:** Orden físico y visual
- **Base de Datos:** Orden lógico definido por esquemas digitales

---

## Importancia Cultural y Tecnológica

.pull-left[

### Contexto Cultural
- **Quipú:** Reflejo de la cosmovisión inca, sin sistema de escritura
- **Base de Datos:** Reflejo de avances tecnológicos y manejo de información en la sociedad moderna

### Especialización del Conocimiento
- **Quipú:** Quipucamayocs, especialistas en su manejo
- **Base de Datos:** Programadores y analístas de datos]


.pull-right[
![cash](img/quipu2.png)]


---

background-image: url("img/quipueg.jpg")
background-size: cover


---
class: inverse, center, middle


# 2. Data Wrangling


---
background-image: url("img/limpieza.png")
background-size: cover



---
background-image: url("img/herramientas.png")
background-size: cover

---

class: center, middle

# 2.1 Limpieza de datos
## Janitor
![datos](img/janitor.jpg)

---
## Limpiar nombres de variables

En general los nombres de las variables de bases de datos (en bruto) tienen la forma 
```{r, eval=TRUE}
library(openxlsx)
datos <- read.xlsx(xlsxFile = "base/Encuesta Estudiantes Antropología 2023 (respuestas).xlsx", 
                   startRow = 2)
#extraigo el nombre de todas las variables y las observo
names (datos)
```


 

---

## Limpiar nombres de variables 1

```{r, eval=FALSE, include=TRUE}
# Janitor
#install.packages("janitor")
library(janitor)

datos <- janitor::clean_names(datos)# transformo todo a minúscula, quito tildes, saco signos, borro espacios
```
---

## Limpiar nombres de variables


```{r, eval=TRUE}
library(openxlsx)
datos <- read.xlsx(xlsxFile = "base/Encuesta Estudiantes Antropología 2023 (respuestas).xlsx", 
                   startRow = 2)
datos <- janitor::clean_names(datos)
names (datos)
```

---
background-size: contain
background-repeat: no-repeat
background-position: center center
background-image: url("img/limpieza2.png")



---
## Reducir nombres de variables 2

### Existen nombres de variables muy largos, los quiero acortar.

1. Genero un vector con todas las columnas que quiero renombrar

```{r, eval=FALSE, include=TRUE}
cols_a_renombrar <- c( 
"marca_temporal",
"p02_edad_del_a_entrevistado",
"p03_genero_del_a_entrevistado_a",
"p04_ano_en_que_se_encuentra_de_la_carrera_1_2_3_4_5",
"p05_comuna_actual_de_residencia")
```

---
## Limpiar nombres de variables

### Extraer las primeras letras de variables: hacerlas más sencillas para procesar.

2. Genero un vector sólo con las 3 primeras letras: p01

```{r, eval=FALSE}
library(tidyverse)

nuevos_nombres <- str_sub(string = cols_a_renombrar, start = 1, end = 3) #muestro los argumentos
nuevos_nombres
```


+ **primer argumento** - string = de donde saco los nombres: el vector creado

+ **segundo argumento** - start = desde que posición extraigo (p)

+ **tercer argumento** - end= hasta donde (1)

---
## Limpiar nombres de variables

### Asignar nuevos nombres

3. Renombro considerando todas las columnas elegidas asignando nuevos nombres

```{r, eval=FALSE}
datos <- datos %>%
  rename_at(vars(cols_a_renombrar), ~ nuevos_nombres) #recodificación múltiples con un vector
```

+ **rename_at**: renombra las siguientes columnas y ponle estos nombres

+ **cols_a_renombrar**: son las columnas a renombrar

+ **~**: es el signo que me indica una relación de transformación

+ **nuevos nombres**: son los nuevos nombres que van adquirir las variables
---
## Limpiar nombres de variables

### Asignar nuevos nombres

4. Renombro algunas variables en específico
Posibilidad de renombrar uno por uno las variables de interés. 

```{r, eval=FALSE}
libro_códigos <- read.xlsx(xlsxFile = "base/Encuesta Estudiantes Antropología 2023 (respuestas).xlsx", startRow = 2)
names(libro_códigos)

datos <- datos %>% dplyr::rename(  # primero nuevo nombre y luego nombre antiguo
                        edad = p02, 
                        genero = p03, 
                        annio = p04, 
                        comuna_actual = p05, 
                        comuna_pre= p06, 
                        tipo_colegio = p07, 
                        puntaje = p08, 
                        estudio_trabajo = p09, 
                        educacion_madre = p10, 
                        trabaja_madre =p11, 
                        empleo_madre =p12, 
                        educacion_padre =p13, 
                        trabaja_padre =p14, 
                        empleo_padre = p15, 
                        psdhogar = p17, 
                        clase_social_subjetiva = p18)
```
---
## Limpiar nombres de variables

Finalmente observo los nombres de mis nuevas variables

```{r, eval=FALSE}
names(datos)

```
 [1] "mar"                    "edad"                   "genero"                
 [4] "annio"                  "comuna_actual"          "comuna_pre"            
 [7] "tipo_colegio"           "puntaje"                "estudio_trabajo" 
---
class: center, middle

# 2.2 Transformación de contenido de casos

---
## Transformaciones/limpieza en variables numéricas

Limpieza inicial de variables numéricas

```{r, eval=FALSE}
table(datos$edad) # vemos el ingreso de una variable que dice "años"
class (datos$edad) # Se considera "character"
```
> table(datos$edad) # vemos que hay un caso que dice "años"

     19      20      21      22      23 24 años      30 
      1       8       4       3       3       1       1 
> class (datos$edad) # Se considera "character"
[1] "character"

Lee la variable como `character` porque existe una observación que dice años

---
## Transformaciones/limpieza en variables numéricas

Limpieza inicial de variables numéricas

Eliminamos todo lo que no sea número de la variable numérica
```{r, eval=FALSE}
datos$edad <- as.numeric(gsub("[^0-9]+", "", datos$edad)) # elimino todo lo que no es número
```
## Explicación: 
* **[^0-9]** busca cualquier secuencia de caracteres que no sean dígitos (0-9)
  + los reemplaza con una cadena vacía "". 
  + elimina cualquier carácter que no sea numérico de la columna "edad"
  + as.numeric: transforma en numérico. 
---

background-size: contain
background-repeat: no-repeat
background-position: center center
background-image: url("img/asnumeric.png")


---
## Transformaciones/limpieza en variables numéricas

Limpieza inicial de variables numéricas

Finalmente se comprueba si la transformación resulta correctamente

```{r, eval=FALSE}
class (datos$edad) # compruebo si es numérico
table(datos$edad) # observo como quedó variable
```
.pull-left[
* class (datos$edad) # compruebo si es numérico
* table(datos$edad) # observo como quedó variable

]
.pull-right[ 
| Edad | Frecuencia |
|-------------- | -------------- |
| 19           | 1              |
| 20           | 8              |
| 21           | 4              |
| 22           | 3              |
| 23           | 3              |
| 24           | 1              |
| 30           | 1              |
]
 
---
# Recodificación de variables

Recodificación de tipo de medición de variable: paso de `numérica` a `ordinal`

Existen 2 funciones que usamos de manera combinada, `mutate` y `case_when`

```{r, eval=FALSE}
datos <- datos %>% 
  mutate (edadr= case_when (edad %in% c(18:20) ~ "18 a 20", 
                            edad %in% c(21:23) ~ "21 a 23", 
                            edad >= 24 ~ "24 o más"))
```

+ **mutate**: función para modificar/crear variables
+ **edadr**: variable nueva
+ **case_when**: argumumento al interior de mutate para decir, cuando se da "x" transformalo en "y"
+ **edad**: variable vieja
+ **~**: indica la modificación



---
# Recordemos los operadores lógicos

.pull-left[

| Operador | Descripción             | Ejemplo                              |
|----------|-------------------------|--------------------------------------|
| ==       | Igual a                 | `edad == 5`                          |
| !=       | No es igual a           | `sexo != "F"`                        |
| <        | Menor que               | `edad < 18`                          |
| >        | Mayor que               | `edad > 18`                          |
| <=       | Menor o igual que       | `edad <= 18`                         |
| >=       | Mayor o igual que       | `edad >= 65`                         |
| &        | Y lógico (AND)          | `sexo != "M" & edad <= 18`            |
]

.pull-left[
+ **&**:  AND: Cuando se cumplen ambas condiciones
+ **|**:  OR: Cuando se cumple una u otra condición
+ **%in%**: Incluye. Lo que está a la izquierda está incluido en lo q está a la derecha
]





---
# Transformación de variables

Recodificación de tipo de medición de variable: paso de `numérica` a `ordinal`.
Comparamos:

```{r, eval=FALSE}
table(datos$edad)
table(datos$edadr)
```



.pull-left[
> table(datos$edad)

| Edad | Frecuencia |
|-------------- | -------------- |
| 19           | 1              |
| 20           | 8              |
| 21           | 4              |
| 22           | 3              |
| 23           | 3              |
| 24           | 1              |
| 30           | 1              |
]
 
.pull-right[

> table(datos$edadr)

| Edad recodificada    | Frecuencia |
|----------------- | -------------- |
| 18 a 20          | 9              |
| 21 a 23          | 10             |
| 24 o más         | 2              |

+ entonces: **¿Qué es recodificar?**

] 
 
---
background-size: contain
background-repeat: no-repeat
background-position: center center
background-image: url("img/recode.png")
 
 
 
---
## Transformaciones/limpieza en variables cualitativas

En las variables categóricas de pregunta abierta cada uno responde como quiere, por lo tanto exite el problema de homogeneizar las respuestas a estas variables para poder analizar posteriormente
```{r, eval=FALSE}
table(datos$genero)
table(datos$annio)
table(datos$comuna_actual) #que cosa rara observa? 
table(datos$comuna_pre) #que cosa rara observa? 
```
* ¿Cómo homogeneizo los valores escritos?
+ Algunos tienen mayúsculas y minusculas en diversas letras
+ Algunos usan tildes y otros no
+ Uno escribe `Santiago` y otro `Santiago centro`
---
## Transformaciones/limpieza en variables cualitativas

Homogeinizo categorías de respuesta, sin tildes, en minúsculas y cambio espacios por guión bajo (_)
```{r, eval=FALSE}
#saco caracteres típicos del español (ñ), elimino comas y espacios y pongo todo en minuscula

datos <- datos %>%
  mutate(comuna_actual = stringi::stri_trans_general(comuna_actual, "Latin-ASCII"), 
         comuna_actual = tolower (comuna_actual), 
         comuna_actual = gsub(" ", "_", comuna_actual)) 

#Observo
table(datos$comuna_actual) 
```

+ **mutate**: modifica o crea una variable
+ **comuna_actual**: variable nueva
+ **stri_trans_general(comuna_actual, "Latin-ASCII")**:  borra tildes y ñ
+ **tolower (comuna_actual)**: transforma todo en minúscula
+ **comuna_actual = gsub(" ", "_", comuna_actual)**: cambia espacios a _

---
## Transformaciones/limpieza en variables cualitativas

Recodificar con `recode` permite recodificar de manera personalizada las categorías de la variable 
```{r, eval=FALSE}
#recodifico
datos <- datos %>%
  mutate(comuna_actual = recode(comuna_actual,
                             "puente_alto_" = "puente_alto",
                             "santiago_centro" = "santiago",
                             "san_felipe,_v_region" = "san felipe", 
                             "paine_" = "paine"))
table(datos$comuna_actual) 
```

+ **mutate**: modifica o crea una variable
+ **comuna_actual**: variable nueva
+ **recode**: función para recodificar
+ **comuna_actual**: variable vieja (se pisan)
+ **la coma**: va separando las distintas recodificaciones
+ **valores viejos** = valores nuevos



---
background-size: contain
background-repeat: no-repeat
background-position: center center
background-image: url("img/Data_Wrangling.png")


---
# Finalmente guardo mi base

```{r, eval=FALSE}
dir.create(path = "output")
write.xlsx(x = datos,file = "output/Encuesta_Antropología_Limpia")
```

+ **dir.create**: crea un directorio nuevo
+ **write.xlsx**: crea una base de datos con las modificaciones realizadas


---


background-size: contain
background-repeat: no-repeat
background-position: center center
background-image: url("img/datos.png")


---

![flujo](img/flujo.png)



---
class: inverse, center, middle

# 3. Gráficos con ggplot
---
# Gráficos con ggplot

![datos](img/Imagen_ggplot.png)
+ ¿Cómo funciona esto en la práctica? 

---
# Gráficos con ggplot

### ¿Cómo funciona esto en la práctica? 

El caso de uso más simple de ggplot consiste en:

+ una llamada a la función ggplot(), pasándole un dataset y una “asignación de atributos estéticos” (aesthetic mapping en inglés) usando aes()

+ al menos una capa “geom”, que define el recurso gráfico que mostrará los datos; por ejemplo  geom_line() para dibujar líneas o geom_point() para dibujar puntos.

---
## Gráficos con ggplot
![datos](img/ggplot_sintaxis.png)
![datos](img/ggplot_explicacion.png)
---
## Gráficos con ggplot

```{r, echo=FALSE }
knitr::include_graphics("img/ggplot.gif")

```

---
## Gráficos con ggplot

### Lógica de cebolla anidando las capas con el signo +

```{r, eval=FALSE}
ggplot(data= base_a_utilizar, aes(x = variable_1, y = variable_2, 
                                  color =variable_que distingue_color, 
                                  fill=variable_que_rellena,)) + 
  geom_algo()+ 
  labs () + 
  guides()+ 
  theme_() 
```

+ **data**: de dónde salen los datos, cuál es la base/tabla a utilizar
+ **aes**: cuáles serán las variables a considerar
+ **color**: cuáles serán los colores de las líneas
+ **fill** cuáles serán los colores internos
+ **geom_algo()**: qué tipo de gráfico se va a realizar?
+ **labs ()**: cuales serán los títulos?
+ **guides()**: se integra o no un cuadrado donde se mostrarán una descripción de categorías?
+ **theme_()**: se utilizará o no un tema global?




---
## Gráficos de Barra (geom_bar) con ggplot

```{r, eval=TRUE, echo=FALSE}
library(openxlsx)
datos<- read.xlsx("output/Encuesta_Antropología_Limpia.xlsx")
```

### Proceso 1: Frecuencias
1) realizo la tabla a graficar
```{r}
tabla_frecuencia <- table(datos$genero)
df_tabla_frecuencia <- as.data.frame(tabla_frecuencia) # transformo a data.frame
df_tabla_frecuencia #observo tabla
```
---
#### Gráficos con ggplot - Proceso 1: Frecuencias
2) realizo gráfico
```{r}
ggplot(data = df_tabla_frecuencia, aes(x = Var1, y = Freq)) +
  geom_bar(stat = "identity", fill = "blue") +
  labs(title = "Gráfico de Barras de Género", x = "Género", y = "Frecuencia")
```

---

##Elementos

* **ggplot(data = df_tabla_frecuencia, aes(x = Var1, y = Freq))**: 
  + Esta parte inicia un nuevo gráfico utilizando los datos del DataFrame df_tabla_frecuencia. 
  + aes significa "aesthetics" y aquí se establecen las variables que se utilizarán en el gráfico, donde Var1 se asigna al eje X y Freq al eje Y.

* **geom_bar(stat = "identity", fill = "blue")**: 
  + Agrega una capa de gráfico de barras. 
  + El stat = "identity" significa que los valores de Freq representan directamente las alturas de las barras. 
  + fill = "blue" establece el color de las barras en azul.

* **labs(title = "Gráfico de Barras de Género", x = "Género", y = "Frecuencia")**: 
  + Define etiquetas para el gráfico. 
  + title: establece el título del gráfico como "Gráfico de Barras de Género", x establece la etiqueta del eje X como "Género", y y establece la etiqueta del eje Y como "Frecuencia".


---
#### Gráficos con ggplot

1) Crear la tabla de frecuencia
```{r}
tabla_frecuencia <- table(datos$genero)
```

2) Creo tabla de porcentajes
```{r}
porcentajes <- prop.table(tabla_frecuencia) * 100
df_porcentajes <- data.frame(porcentajes) # transformo a data.frame
df_porcentajes #observo tabla

```
---
#### Gráficos con ggplot: 3) realizo gráfico
```{r}
ggplot(data = df_porcentajes, aes(x = Var1, y = Freq)) +
  geom_bar(stat = "identity", fill = "blue") +
  labs(title = "Gráfico de Barras de Género", x = "Género", y = "Porcentaje (%)") +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) # pasa a formato porcentaje
```
---
##### Gráficos con ggplot: 4) voy puliendo gráfico, agrego un tema y cambio colores
```{r}
#a) agrego un tema y cambio colores
ggplot(data = df_porcentajes, aes(x = Var1, y = Freq, fill = Var1)) +geom_bar(stat = "identity") +
  labs(title = "Gráfico de Barras de Género", x = "Género", y = "Porcentaje (%)") +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) + theme_minimal() +  # Aplicar un tema minimal
  scale_fill_brewer(palette = "Set3") # Usar una paleta de colores Brewer
```
---
4) voy puliendo gráfico, elimino etiquetas, nombre de ejes y angulo de textos
```{r}
#b) elimino etiquetas, nombre de ejes y angulo de textos
ggplot(data = df_porcentajes, aes(x = Var1, y = Freq, fill = Var1)) +geom_bar(stat = "identity") +
  labs(title = "Gráfico de Barras de Género", caption = "fuente: Prueba Piloto: II Encuesta Estudiantes Antropología UAH") +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) +theme_minimal() +  # Aplicar un tema minimal
  scale_fill_brewer(palette = "Set3")  + # Usar una paleta de colores Brewer
  guides(fill = "none")+ #elimino cuadro de etiquetas 
  xlab("") + ylab("") + #elimino nombre de ejes 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 
```
---

```{r}
ggplot(data = df_tabla_frecuencia, aes(x = fct_reorder(Var1, Freq), y = Freq, fill = Var1))+
  geom_bar(stat = "identity", fill = "grey") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) 

```

---
* **ggplot(...)**: Inicia un nuevo gráfico utilizando los datos del DataFrame df_tabla_frecuencia.
  + aes(...): Define las estéticas del gráfico.
  + x = fct_reorder(Var1, Freq): Esto reordena las categorías en el eje X (horizontal) según los valores en la columna Freq. Las categorías se ordenarán de mayor a menor frecuencia.
  + y = Freq: Muestra la frecuencia en el eje Y (vertical) del gráfico de barras.
  + fill = Var1: El relleno de las barras se basa en los valores de la columna Var1, lo que significa que cada categoría tendrá un color diferente en el gráfico de barras.

**geom_bar(stat = "identity", fill = "grey")**:
  + geom_bar(...): Agrega la capa de barras al gráfico.
  + stat = "identity": Indica que las alturas de las barras se definen directamente por los valores en la columna Freq del DataFrame.
  + fill = "grey": Establece el color de relleno de las barras en gris.

* **theme(axis.text.x = element_text(angle = 90, hjust = 1)**
  + theme(...): Permite personalizar aspectos del tema del gráfico.
  + axis.text.x = element_text(...): Aplica las configuraciones al texto en el eje X.
  + angle = 90: Rota el texto del eje X en un ángulo de 90 grados (vertical).
  + hjust = 1: Alinea el texto del eje X hacia la derecha, lo que es útil cuando el texto está en posición vertical para que esté justo en la parte inferior de las barras.




---

class: inverse, center, middle

# Vamos a la sintaxis...